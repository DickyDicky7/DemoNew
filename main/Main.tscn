[gd_scene load_steps=28 format=2]

[ext_resource path="res://main/Main.cs" type="Script" id=1]
[ext_resource path="res://cop/Cop.tscn" type="PackedScene" id=2]
[ext_resource path="res://main/CameraPivot.cs" type="Script" id=3]
[ext_resource path="res://Level.tscn" type="PackedScene" id=4]
[ext_resource path="res://main/Text.cs" type="Script" id=5]
[ext_resource path="res://assets/Montreal-Regular.ttf" type="DynamicFontData" id=6]
[ext_resource path="res://assets/dithers/bayer16tile02.png" type="Texture" id=7]
[ext_resource path="res://assets/dithers/palette_mist_gameboy.png" type="Texture" id=8]

[sub_resource type="Shader" id=27]
code = "shader_type canvas_item;

uniform sampler2D u_dither_tex;
uniform sampler2D u_colors_tex;

uniform int u_bitttt_depth;
uniform float u_contrast;
uniform float u_offsettt;
uniform int u_dither_sizee;

void fragment() 
{
	vec2 screen_size = vec2(textureSize(TEXTURE, 0)) / float(u_dither_sizee);
	vec2 screen_sample_uv = floor(UV * screen_size) / screen_size;
	vec3 screen_colo =      texture    (TEXTURE,      screen_sample_uv).rgb ;
	
	
	float lum = (screen_colo.r * 0.299)
	          + (screen_colo.g * 0.587)
			  + (screen_colo.b * 0.114);
	
	
	float   contrast = u_contrast;
	lum = (lum - 0.5 + u_offsettt) * contrast + 0.5;
	lum = clamp(lum, 0.0, 1.0);
	
	
	float bits = float(u_bitttt_depth)   ;
	      lum  = floor(lum * bits) / bits;
	
	
	ivec2 col_size  = textureSize(u_colors_tex, 0);
	      col_size /= col_size.y;
	
	float col_x          = float(col_size.x) - 1.0;
	float col_texel_size = 1.0 / col_x            ;
	
	lum = max(lum - 0.00001, 0.0);
	float lum_lower =  floor(lum * col_x)        * col_texel_size;
	float lum_upper = (floor(lum * col_x) + 1.0) * col_texel_size;
	float lum_scaled =       lum * col_x  -
	                   floor(lum * col_x) ;
	
	
	ivec2    noise_size = textureSize(u_dither_tex, 0);
	vec2 inv_noise_size = vec2
	(1.0 / float(noise_size.x) ,
	 1.0 / float(noise_size.y));
	vec2  noise_uv =
	UV * inv_noise_size * vec2(float(screen_size.x) ,
	                           float(screen_size.y));
	float threshold     = texture    (u_dither_tex,
	      noise_uv).r;
	
	
	      threshold     =
		  threshold * 0.99
		            + 0.005;
	
	
	float ramp_val = lum_scaled
	                 <threshold
				   ? 0.0f
				   : 1.0f     ;
	float       col_sample = mix(lum_lower,
	                             lum_upper,
								ramp_val  );
	vec3  final_col        = texture(u_colors_tex, vec2(col_sample, 0.5)).rgb;
	

	COLOR.rgb = final_col;
}
"

[sub_resource type="ShaderMaterial" id=26]
shader = SubResource( 27 )
shader_param/u_bitttt_depth = 32
shader_param/u_contrast = 1.0
shader_param/u_offsettt = null
shader_param/u_dither_sizee = 1
shader_param/u_dither_tex = ExtResource( 7 )
shader_param/u_colors_tex = ExtResource( 8 )

[sub_resource type="ProceduralSky" id=28]
sky_top_color = Color( 0.7, 0.8, 1, 1 )
sky_horizon_color = Color( 0.8, 0.9, 1, 1 )
ground_bottom_color = Color( 0.2, 0.2, 0.2, 1 )
ground_horizon_color = Color( 0.3, 0.3, 0.3, 1 )

[sub_resource type="Environment" id=4]
background_mode = 2
background_sky = SubResource( 28 )
tonemap_mode = 2

[sub_resource type="Shader" id=8]
code = "shader_type spatial ;
render_mode unshaded;

const int pixel_size = 4; //resolution must be divisible by pixel_size

void fragment()
{
	float x = float(int(FRAGCOORD.x) % pixel_size);
	float y = float(int(FRAGCOORD.y) % pixel_size);

	x = FRAGCOORD.x + floor(float(pixel_size) / 2.0) - x;
	y = FRAGCOORD.y + floor(float(pixel_size) / 2.0) - y;

	ALBEDO = texture(SCREEN_TEXTURE, vec2(x, y) / VIEWPORT_SIZE).xyz;
}
"

[sub_resource type="ShaderMaterial" id=7]
shader = SubResource( 8 )

[sub_resource type="QuadMesh" id=6]
material = SubResource( 7 )
size = Vector2( 2, 2 )

[sub_resource type="DynamicFont" id=15]
size = 10
font_data = ExtResource( 6 )

[sub_resource type="SpatialMaterial" id=16]
albedo_color = Color( 0, 0, 0, 1 )

[sub_resource type="TextMesh" id=14]
material = SubResource( 16 )
text = "FPS:"
font = SubResource( 15 )
depth = 0.0

[sub_resource type="DynamicFont" id=18]
size = 10
font_data = ExtResource( 6 )

[sub_resource type="SpatialMaterial" id=19]
albedo_color = Color( 0, 0, 0, 1 )

[sub_resource type="TextMesh" id=17]
material = SubResource( 19 )
text = "OS :"
font = SubResource( 18 )
depth = 0.0

[sub_resource type="DynamicFont" id=21]
size = 10
font_data = ExtResource( 6 )

[sub_resource type="SpatialMaterial" id=22]
albedo_color = Color( 0, 0, 0, 1 )

[sub_resource type="TextMesh" id=20]
material = SubResource( 22 )
text = "Gyroscope    :"
font = SubResource( 21 )
depth = 0.0

[sub_resource type="DynamicFont" id=24]
size = 10
font_data = ExtResource( 6 )

[sub_resource type="SpatialMaterial" id=25]
albedo_color = Color( 0, 0, 0, 1 )

[sub_resource type="TextMesh" id=23]
material = SubResource( 25 )
text = "Accelerometer:"
font = SubResource( 24 )
depth = 0.0

[node name="Main" type="Spatial"]
script = ExtResource( 1 )

[node name="ViewportContainer" type="ViewportContainer" parent="."]
material = SubResource( 26 )
anchor_right = 1.0
anchor_bottom = 1.0
stretch = true
stretch_shrink = 3

[node name="Viewport" type="Viewport" parent="ViewportContainer"]
size = Vector2( 200, 341 )
handle_input_locally = false
hdr = false
render_target_update_mode = 3
shadow_atlas_size = 256

[node name="Env" type="WorldEnvironment" parent="ViewportContainer/Viewport"]
environment = SubResource( 4 )

[node name="Sun" type="DirectionalLight" parent="ViewportContainer/Viewport"]
transform = Transform( -0.866026, -0.433012, 0.25, 0, 0.5, 0.866025, -0.5, 0.75, -0.433013, 0, 0, 0 )
shadow_enabled = true
directional_shadow_mode = 0

[node name="Cop" parent="ViewportContainer/Viewport" instance=ExtResource( 2 )]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, -45 )

[node name="CameraPivot" type="Spatial" parent="ViewportContainer/Viewport/Cop"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0.4, 1, 0 )
script = ExtResource( 3 )

[node name="Camera" type="Camera" parent="ViewportContainer/Viewport/Cop/CameraPivot"]
transform = Transform( -1, -2.99004e-08, 8.21506e-08, 0, 0.939693, 0.34202, -8.74228e-08, 0.34202, -0.939693, 0, 0, 0 )

[node name="Len" type="MeshInstance" parent="ViewportContainer/Viewport/Cop/CameraPivot/Camera"]
transform = Transform( 1, -3.55271e-15, 7.10543e-15, 0, 1, 0, 0, 0, 1, 0, 0, -0.5 )
visible = false
mesh = SubResource( 6 )

[node name="SpotLight" type="SpotLight" parent="ViewportContainer/Viewport/Cop/CameraPivot/Camera"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0.5 )

[node name="Camera_Temp" type="Camera" parent="ViewportContainer/Viewport/Cop"]
transform = Transform( -1, 1.51808e-08, -8.60946e-08, 0, 0.984808, 0.173648, 8.74228e-08, 0.173648, -0.984808, 0, 5, -10 )
current = true

[node name="Text" type="Spatial" parent="ViewportContainer/Viewport/Cop/Camera_Temp"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, -1 )
script = ExtResource( 5 )
PathMeshFPS = NodePath("FPS")
PathMeshOS = NodePath("_OS")
PathMeshGyroscope = NodePath("____Gyroscope")
PathMeshAccelerometer = NodePath("Accelerometer")

[node name="FPS" type="MeshInstance" parent="ViewportContainer/Viewport/Cop/Camera_Temp/Text"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.5, 0 )
mesh = SubResource( 14 )

[node name="_OS" type="MeshInstance" parent="ViewportContainer/Viewport/Cop/Camera_Temp/Text"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.4, 0 )
mesh = SubResource( 17 )

[node name="____Gyroscope" type="MeshInstance" parent="ViewportContainer/Viewport/Cop/Camera_Temp/Text"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.3, 0 )
mesh = SubResource( 20 )

[node name="Accelerometer" type="MeshInstance" parent="ViewportContainer/Viewport/Cop/Camera_Temp/Text"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.2, 0 )
mesh = SubResource( 23 )

[node name="Camera" type="Camera" parent="ViewportContainer/Viewport"]
transform = Transform( -4.37114e-08, 0, 1, 0, 1, 0, -1, 0, -4.37114e-08, 5, 1, 0 )

[node name="Level$" parent="ViewportContainer/Viewport" instance=ExtResource( 4 )]
